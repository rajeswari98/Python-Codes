Running Tests
Run the tests written in sample_tests.txt using the below command.
python3 ‑m doctest sample_tests.txt
By default, no output is seen when all tests pass. To view a verbose output, use -v option as shown in below command.
python3 ‑m doctest -v sample_tests.txt

Running Tests in docstrings
You can now run the tests with the below command
python3 ‑m doctest sample_module.py
Since all tests pass, you see an empty output.
Let's alter the expected output of add2num(-8.5, 7) as -2.5 and run the tests again, the following output is seen.
**********************************************************************
File "D:\python 3.5\sample_module.py", line 5, in sample_module.add2num
Failed example:
    add2num(-8.5, 7)
Expected:
    -2.5
Got:
    -1.5
**********************************************************************
1 items had failures:
   1 of   2 in sample_module.add2num
***Test Failed*** 1 failures.
One test add2num(-8.5, 7) fails.

=-===============================================================================================
Using Unittest
----------------------------------
Let's understand implementation of unittest by writing the below shown code in test_module1.py
from sample_module import add2num

import unittest

class Testadd2num(unittest.TestCase):

    def test_sum_2pos_num(self):
      self.assertEqual(add2num(6, 7), 13)

    def test_sum_1pos_and_1neg_num(self):
      self.assertEqual(add2num(-10, 9), -1)
The class Testadd2num is derived from base class unittest.TestCase.

Methods defined inside Testadd2num check the functionality of add2num defined in sample_module.py file.

Running all Tests
All the test cases written in test_module1.py can be run with below command.
python -m unittest test_module1
Usage of .py extension, while specifying the module is not required, as shown above.
Output
..
---------------------------------
Ran 2 tests in 0.001s

OK
The output shows passing of two tests successfully. Verbose output can be viewed by adding -v at the end as shown below.
python -m unittest test_module1 -v


Running Selected Tests
It is also possible to select tests at a lower level such as Class level or Test level.

You can run only the tests belonging to Testadd2num class with the below command.

python -m unittest test_module1.Testadd2num
Output
..
---------------------------------
Ran 2 tests in 0.001s

OK
A single test test_sum_2pos_num can also be run as shown below.
python -m unittest test_module1.Testadd2num.test_sum_2pos_num
Output
.
---------------------------------
Ran 1 tests in 0.001s

OK

Running with unitest.main
All the test cases written in a file can be run by adding the following lines at the end of the file test_module1.py
if __name__ == '__main__':
    unittest.main()
Usage of if __name__ == '__main__' block will ensure that code inside the block will be executed only when the module is run as a program.

Hence you can run all tests at once using the below command.

python test_module1.py
Output
..
---------------------------------
Ran 2 tests in 0.001s

OK
The output shows two tests were run successfully. For a verbose output use the below command.
python test_sample_module.py -v


Writing Multiple Test Classes
Let's add pow2num function in sample_module.py, before writing another test class.
Definition of pow2num function
def pow2num(x, y):
    """Returns x power of y.
    >>> pow2num(2, 6)
    64
    >>> pow2num(10, -3)
    0.001
    """
    return x**y
Now add the below Test class to test_module1.py
class Testpow2num(unittest.TestCase):

    def test_pow_2pos_num(self):
        self.assertEqual(pow2num(3, 4), 81)

    def test_neg_pow(self):
        self.assertEqual(pow2num(10, -2), 0.01)

    def test_negnum_pow(self):
        self.assertEqual(pow2num(-3, 3), -26)
The Test class contained three tests and third test is written such that it fails

Running Multiple Test Classes
You can run all the tests in test_module1.py with the below command
python test_module1.py
Output
...F.
======================================================================
FAIL: test_negnum_pow (test_module1.Testpow2num)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "D:\python 3.5\test_module1.py", line 26, in test_negnum_pow
    self.assertEqual(pow2num(-3, 3), -26)
AssertionError: -27 != -26

----------------------------------------------------------------------
Ran 5 tests in 0.001s

FAILED (failures=1)
One failure is reported out of overall five tests.

Using Test Fixtures at Class level
Now let's add two more methods to Testadd2num test class as shown below.

.....

class Testadd2num(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        print('Executed before any test in the class runs.')

    @classmethod
    def tearDownClass(cls):
        print('Executed after all tests in class are run.'

    ....
setUpClass and tearDownClass are class methods. setUpClass runs once before any method of the class runs and tearDownClass runs after all methods of the class are executed.
Output
Executed before any test in the class runs
Executed before start of every test
Executed at the end of every test
.Executed before start of every test
Executed at the end of every test
.Executed after all tests in class are run
...
------------------------
Ran 5 tests in 0.010s

OK

Using Test Fixtures at Module Level
Now let's add the following at the top of test_module1.py.

.... 

def setUpModule():
    print('Executed before an test in the module')

def tearDownModule():
    print('Executed after all tests in module are run')
    
class Testadd2num(unittest.TestCase):
   ....
setUpModule runs once before any is executed in a module and tearDownModule runs once after all tests in a module are executed.
Output
Executed before an test in the module is run
Executed before any test in the class runs
Executed before start of every test
Executed at the end of every test
.Executed before start of every test
Executed at the end of every test
.Executed after all tests in class are run
...Executed after all tests in module are run
-----------
Ran 5 tests in 0.010s

OK

Test Discovery is the process of finding all tests present in a project folder and executing them automatically.

Test Discovery plays a vital role in automating all tests.

You can achieve it by running the below command from Project1 folder.

python -m unittest discover
discover is the option used for performing test discovery.

By default, unittest starts finding all tests from the working directory.

Assert Methods in unittest
Till now, you have seen usage of basic assertions like assertEqual , and assertTrue.

In addition to these assertions, unittest supports usage of various assertions, which are handy to verify to various testing conditions.

The purpose of various assertions can easily be understood from their names it's self.

For e.g, the assertion assertIsNone(x), checks if the variable x is None.

Majorly Used Assert Methods
Frequently used assert methods in unittest are:

assertEqual(a, b) - Tests if a equals to b

assertAlmostEqual(a, b) - Tests if round(a-b, 7) is 0.

assertTrue(x) - Tests if bool(x) is True.

assertIs(a, b) - Tests if a is b.

assertIsNone(x) - Tests if x is None

assertIn(a, b) - Tests if a in b

assertIsInstance(a, b) - Tests if a is an instance of b.

Majorly Used Assert Methods
Few more frequently used assert methods are:

assertRegexpMatches(s, r) - Tests if the regular expression pattern r is found in string s.

assertItemsEqual(a, b) - Tests if sorted(a) equals to sorted(b)

assertListEqual(a, b) - Tests if two lists a and b are same.

assertMultiLineEqual(a, b) - Tests if two multiline strings a and b are equal.

Catching Exceptions
Another important assertion, assertRaises is used to catch exceptions.

assertRaises tries to check if a specified Exception is raised, when the test runs.

The test passes, if the specified exception is raised or else it fails.

The below shown test test_sample1 written in another module test_module2.py catches TypeError raised while adding an integer and a string.

from proj.sample_module import add2num

import unittest


class SampleTestClass(unittest.TestCase):


    def test_sample1(self):
        self.assertRaises(TypeError, add2num, 3, 'hello')
Running the above test with below command, passes the test.
python -m unittest test.test_module2

Catching Exceptions
You can also use with for catching exceptions.

The previous example can be written as shown below.

from proj.sample_module import add2num
import unittest

class SampleTestClass(unittest.TestCase):

    def test_sample1(self):
        with self.assertRaises(TypeError) as e:
            r = add2num(3, 'hello')
        self.assertEqual(str(e.exception), "unsupported operand type(s) for +: 'int' and 'str'")
The example also validates the error message, which is displayed.

Skipping Tests
Usually, it is not advisable to skip any of the written tests.

However, in certain circumstances you may prefer skipping few tests. This can be achieved in unittest using one of the following methods.

unittest.skip
unittest.skipIf
unittest.skipUnless
unittest.expectedFailure

Skipping Tests
unittest.skip skips a decorated test unconditionally. You can pass a reason for skipping the test as an argument.

It's usage syntax is shown below.

@unittest.skip('reason for skipping')
def test_sample(self):
   ....
unittest.skipIf skips a decorated test only if a given condition is evaluated to True.
It's usage syntax is shown below.
@unittest.skipIf(condition, reason for skipping)
def test_sample(self):
   ....

Skipping Tests
unittest.skipUnless skips a test unless the given condition is True.

It's syntax is shown below.

@unittest.skipUnless(condition, reason for skipping)
def test_sample(self):
   ....
unittest.expectedFailure marks a test as a failure test. i.e even if the decorated test fails, it is not counted as a failure one.

When you run test_module2 by decorating test_sample method unittest.expectedFailure and modifying TypeError to ValueError in assertRaises expresssion, it produces the below output.

x
----------
Ran 1 test in 0.003s

OK <expected failures = 1>
A failure test is marked as x in the output.

Testing Reports
Test reports can be generated in various formats such as text, xml and HTML.

By default, unittest can generate report in text format by using TextTestRunner

To obtain reports in xml format, you need to install a third party module unittest-xml-reporting and use XMLTestRunner utility of it.

Tests reports can also be obtained in HTML format by using utilities from another third party module, HTMLTestRunner.


============================================================================================
Introduction to nose
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
nose is another unit testing module in Python.

nose makes testing easier by extending unittest framework.

nose can be used to run automated tests and also the tests written in other frameworks like unittest.

nose is available as a third party library and can be installed using pip command as shown below.

pip install nose
Successful installation of nose can be verified by running the below command.
nosetests -V

Writing your first nose test
Consider the function test_sample_nosetest defined in sample_nose_test.py. This function is a sample nose test.
def test_sample_nosetest():
    assert 'HELLO' == 'hello'.upper()
From above example, you can observe that, nose allows writing a test case outside a test class.

Even writing any test class does not need to derived from a parent class in nose.

nose uses python's assert method for checking the truthiness of an expression.


Running a nose test
Tests in sample_nose_test.py can be run using the below command.
python -m nose sample_nose_test.py
Output
.
----------------------
Ran 1 test in 0.000s

OK

For verbose output use -v option at the end.
python -m nose sample_nose_test.py -v
Output
sample_nose_test.test_sample_nosetest ... ok

-------------------------
Ran 1 test in 0.001s

OK

You can also run the test module using nosetests command as shown below.
nosetests  sample_nose_test.py -v
The above command produces same output as verbose one.

Creating a Test Project
For creating a test module, let's create a new project named Project2 similar to Project1.

Create sub folders proj and test inside Project2.

Create two empty files named __init__.py inside proj and test folders respectively.

Create a copy of Project1/proj/sample_module.py and place it in Project2/proj/sample_module.py.

Add the line all = ['sample_module'] to Project2/proj/__init__.py file.

Creating a Test Module
Create an empty test module named test_module1.py inside test folder.

Add the following code to Project2/test/test_module1.py

from proj.sample_module import add2num

class Testadd2num:

    def test_sum_2pos_num(self):
      assert add2num(6, 7)==13

    def test_sum_1pos_and_1neg_num(self):
      assert add2num(-10, 9)==-1

Add the line all = ['test_module1'] to Project2/test/__init__.py file.

Running a Test Module
Now you can run all the tests in test module test_module1.py with the below command.
nosetests test.test_module1 -v
Verbose Output
test.test_module1.Testadd2num.test_sum_1pos_and_1neg_num ... ok
test.test_module1.Testadd2num.test_sum_2pos_num ... ok

----------------------------
Ran 2 tests in 0.002s

OK
Syntax for running a Test class is slightly different from unittest as shown below. Here you use : instead of ..
nosetests test.test_module1:Testadd2num -v
And a single test can be run as shown below.
nosetests test.test_module1:Testadd2num.test_sum_2pos_num -v

Test Discovery with nose
Test Discovery process is simpler with nose than with unittest.

No need of using discover option.

Simply use the command shown below to run all the tests present in Project2 folder.

nosetests -v
Output
..
----------------------------
Ran 2 tests in 0.007s

OK

Test Fixtures
nose also uses the same test fixtures, used in unittest at a module, class , and test method level.

setUpModule and tearDownModule are used at Module level.

setUpClass and tearDownClass are used at class level.

setUp and tearDown are used at test method level.

nose testing tools
nose contains few methods and tools useful for test automation, in nose.tools module.

nose has it's own assert method i.e assert_equals in nose.tools.

Usage of assert_equals is shown in below example by modifying definition of test_sample_nosetest in test_sample_module.py.

def test_sample_nose1test():
    assert_equals('HELLO','hello'.upper())

Usage of OK_ and EQ_
nose.tools also contain methods ok_ and eq_, which function similar to assert and assert_equals respectively.

You can optionally pass an error message that can be displayed when a test fails.

Usage of ok_ and eq_ is shown in below example by defining two functions in sample_test_module.py

from nose.tools import ok_, eq_
def test_using_ok():
    ok_(2+3==5)

def test_using_eq():
    eq_(2+3, 5)

Usage of 'raises' decorator
raises decorator is used to decorate those tests, which are expected to raise an Exception.

The test will be successful only if the exception raised is present in list of exceptions passed to raises decorator.

A sample test added to test_sample_module.py is shown below.

from nose.tools import raises

@raises(TypeError)
def test_using_raises():
    eq_(2+'3', 5)

Report Generation
nose supports generation of test reports in text and xml formats.

By default the report appears in text format.

You can generate a XML report by using --with-xunit option as shown below.

nosetests test.test_module1 -v --with-xunit
The above command generates nosetests.xml report in Project2 folder.

You can generate html report by installing a plug in nose-htmloutput using pip and later running nosetests command using option --with-html.

The above command generates nosetests.html report in Project2 folder.

Pros and Cons
Pros
Unlike unittest, you don't need to extend test cases from a parent class. You can also write test functions.

nose has more fixtures than unittest. It allows fixtures at package and function levels.

nose.tools has many features for automating test cases.

nose can recognize and run unittests tests.

Cons
nose is not under active development from several years.


===================================================================================================================
Introduction to Pytest
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Pytest is another third party python library, used for unit testing.

Pytest can be installed using pip as shown below.

pip install pytest
Successful installation of pytest can be verified by executing the below command at command prompt.
py.test --version

Writing your first pytest test
Write the below shown sample function test_sample_pytest_test in sample_pytest_test.py.
def test_sample_pytest_test():
    assert 'HELLO' == 'hello'.upper()
Similar to nose, it is not mandatory while using pytest to derive a test case from a parent class.


Running the sample test
You can run the sample test in sample_pytest_test.py using the below command.
python -m pytest sample_pytest_test.py
Output
=== test session starts ===
platform ...
rootdir: ... ,
inifile:
collected 1 item                                                               

sample_pytest_test.py .                                                  [100%]

=== 1 passed in 0.08 seconds ===
You can obtain verbose output by using -v option.

You can also run the sample test using py.test command as shown below.

py.test sample_pytest_test.py


Creating a Project
Similar to Project1 and Project2, let's create a new project named Project3.

Create sub folders proj and test inside Project3.

Create two empty files named __init__.py inside proj and test folders respectively.

Create a copy of Project3/proj/sample_module.py and place it in Project3/proj/sample_module.py.

Add the line all = ['sample_module'] to Project3/proj/__init__.py file.

Creating a Test Module
Create an empty test module named test_module1.py inside test folder.

Add the following code to Project3/test/test_module1.py

from proj.sample_module import add2num

class Testadd2num:

    def test_sum_2pos_num(self):
      assert add2num(6, 7)==13

    def test_sum_1pos_and_1neg_num(self):
      assert add2num(-10, 9)==-1
Add the line all = ['test_module1'] to Project3/test/__init__.py file.

Running the Test Module
You can run all the tests present in test module test_module1.py using the below command.
py.test -v test
You can run a single test module in a package with the following command.
py.test -v test/test_module1.py
You can also run a specific test class as shown below.
py.test -v test/test_module1.py::Testadd2num
You can also run a specific test class method as
py.test -v test/test_module1.py::Testadd2num::test_sum_2pos_num

Test Discovery
Test discovery can be easily done with pytest.

Just executing the command py.test -v from a project folder will detect and run all tests present in that project.

Output of running py.test -v from Project3 folder is shown below.

=== test session starts ===
platform win32 ...
cachedir: ...
rootdir: ...
inifile:
collected 2 items                                                             

test/test_module1.py::Testadd2num::test_sum_2pos_num PASSED              [ 50%]
test/test_module1.py::Testadd2num::test_sum_1pos_and_1neg_num PASSED     [ 100%]

=== 2 passed in 0.001 seconds ===

Pytest Fixtures
pytest has xUnit-style of fixtures.

setup_module and teardown_module are module level fixtures.

setup_class and teardown_class are class level fixtures. These fixtures need to be decorated with @classmethod.

setup_method and teardown_method are method level fixtures.

setup_function and teardown_function are function level fixtures.

Apart from these fixtures, pytest also supports defining customised fixtures and using it for a specific method or function.

Skipping Tests
To skip any of the test cases, unconditionally, pytest.mark.skip is used.

It's usage syntax is shown below

@pytest.mark.skip(reason for skipping)
def test_sample():
   ....
You can decorate a class, if you would like to skip all the tests, present in a test class.

You can skip tests based on conditions using pytest.mark.skipif decorator.

It's sample usage is shown below.

@pytest.mark.skipif(condition, reason for skipping)
def test_sample():
   ....

Detecting tests raising Exceptions
pytest uses pytest.raises in a context to detect exceptions in a test.

Add the below shown code to test_module1.py. It uses pytest.raises and occurrence of TypeError is considered as a test pass.

import pytest

def test_using_raises():
    with pytest.raises(TypeError):
        2+'3' == 5

Test Reports Generation
With pytest, tests reports can be generated in various formats such as text, xml and html.

Result can be generated in plain text with --resultlog option.

For example, the below command creates result.txt report in text format.

py.test --resultlog=result.txt
--junitxml is used for generating reports in xml format.
py.test --junitxml=result.xml
pytest-html is the required third party module for generating reports in html format.

Pros and Cons
Pros
pytest is better than unittest. The testing code is simpler and cleaner.

Unlike nose, pytest is under active development.

pytest has great features for controlling the test execution.

pytest can also run unittest tests.

pytest can be extended with plugins such as code coverage, and parallel execution.

Cons
Advanced features of pytest, especially concepts of fixtures need to be explored well before using pytest.
